openapi: 3.0.3
info:
  title: Q&A Assistant - Manage
  description: >-
    The QA Knowledge Assistant Management system provides APIs to create, retrieve, update, and delete QA assistants. These assistants are configured to handle question-answering tasks using large language models (LLMs) and optional knowledge bases. Below is a detailed explanation of the request parameters and response parameters used in these operations.

    ## Security and Authentication
    This API uses OAuth 2.0 with OpenID Connect for authentication. The following scopes are required:
    - assistants:create - Create new assistants
    - assistants:read - Read assistant details
    - assistants:update - Update existing assistants
    - assistants:delete - Delete assistants

  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: wip

servers:
  - url: '{apiRoot}/qa/assistant_manage/vwip'
    variables:
      apiRoot:
        default: http://localhost:8080

paths:
  /assistants:
    post:
      summary: Create a new QA assistant
      tags:
        - Assistants
      parameters:
        - $ref: '#/components/parameters/x-correlator'  # Added correlator
      security:
        - openId: ['assistants:create']  # Added security scope
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssistantCreateRequest'
      responses:
        '201':
          description: Assistant created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantResponse'
        '400':
          $ref: '#/components/responses/Generic400'
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '500':
          $ref: '#/components/responses/Generic500'

    get:
      summary: List all QA assistants
      tags:
        - Assistants
      parameters:
        - $ref: '#/components/parameters/x-correlator'  # Added correlator
      security:
        - openId: ['assistants:read']  # Added security scope
      responses:
        '200':
          description: List of assistants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assistant'
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '500':
          $ref: '#/components/responses/Generic500'

  /assistants/{assistantId}:
    parameters:
      - name: assistantId
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier of the assistant
      - $ref: '#/components/parameters/x-correlator'  # Added correlator

    get:
      summary: Get a specific QA assistant
      tags:
        - Assistants
      security:
        - openId: ['assistants:read']  # Added security scope
      responses:
        '200':
          description: Assistant details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assistant'
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '404':
          $ref: '#/components/responses/Generic404'
        '500':
          $ref: '#/components/responses/Generic500'

    put:
      summary: Update a QA assistant
      tags:
        - Assistants
      security:
        - openId: ['assistants:update']  # Added security scope
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssistantUpdateRequest'
      responses:
        '200':
          description: Assistant updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantResponse'
        '400':
          $ref: '#/components/responses/Generic400'
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '404':
          $ref: '#/components/responses/Generic404'
        '500':
          $ref: '#/components/responses/Generic500'

    delete:
      summary: Delete a QA assistant
      tags:
        - Assistants
      security:
        - openId: ['assistants:delete']  # Added security scope
      responses:
        '204':
          description: Assistant deleted successfully
        '401':
          $ref: '#/components/responses/Generic401'
        '403':
          $ref: '#/components/responses/Generic403'
        '404':
          $ref: '#/components/responses/Generic404'
        '500':
          $ref: '#/components/responses/Generic500'

components:
  securitySchemes:
    openId:
      type: openIdConnect
      openIdConnectUrl: https://example.com/.well-known/openid-configuration
      description: OpenID Connect authentication

  parameters:
    x-correlator:
      name: x-correlator
      in: header
      description: Correlation ID for request tracing
      required: true
      schema:
        type: string
        pattern: '^[a-zA-Z0-9-_:;.\/<>{}]{0,256}$'
        example: "b4333c46-49c0-4f62-80d7-f0ef930f1c46"

  schemas:
    AssistantCreateRequest:
      type: object
      required:
        - name
        - configurationPrompt
        - largeModelParameters
      properties:
        name:
          type: string
          description: Name of the assistant
        description:
          type: string
          description: Description of the assistant
        knowledgeBaseId:
          type: string
          description: Optional ID of the associated knowledge base
        configurationPrompt:
          type: string
          description: Configuration prompt for the assistant
        largeModelParameters:
          type: object
          description: Parameters for the large language model
          required:
            - model
            - parameters
          properties:
            model:
              type: string
              example: "gpt-4"
            parameters:
              type: object
              required:
                - temperature
                - max_tokens
              properties:
                temperature:
                  type: number
                  format: float
                  minimum: 0.0
                  maximum: 1.0
                  example: 0.7
                max_tokens:
                  type: integer
                  minimum: 1
                  example: 200
                top_p:
                  type: number
                  format: float
                  minimum: 0.0
                  maximum: 1.0
                  example: 0.8
        openingRemarks:
          type: string
          description: Optional opening remarks for the assistant

    AssistantUpdateRequest:
      type: object
      properties:
        name:
          type: string
          description: New name of the assistant
        description:
          type: string
          description: New description of the assistant
        knowledgeBaseId:
          type: string
          description: Optional new knowledge base ID
        configurationPrompt:
          type: string
          description: Updated configuration prompt
        largeModelParameters:
          type: object
          description: Updated model parameters
          properties:
            model:
              type: string
            parameters:
              type: object
              properties:
                temperature:
                  type: number
                  format: float
                max_tokens:
                  type: integer
                top_p:
                  type: number
                  format: float
        openingRemarks:
          type: string
          description: Updated opening remarks

    Assistant:
      type: object
      properties:
        assistantId:
          type: string
          description: Unique identifier of the assistant
          format: uuid
          example: "a1b2c3d4-5678-90ab-cdef-1234567890ab"
        name:
          type: string
        description:
          type: string
        knowledgeBaseId:
          type: string
        configurationPrompt:
          type: string
        largeModelParameters:
          type: object
          properties:
            model:
              type: string
            parameters:
              type: object
        openingRemarks:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AssistantResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the operation succeeded
        assistantId:
          type: string
          description: Unique identifier of the assistant
          format: uuid
        message:
          type: string
          description: Success/failure message

    ErrorInfo:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP status code
        code:
          type: string
          description: Error code identifier
        message:
          type: string
          description: Human-readable error message

  responses:
    Generic400:
      description: Bad request due to invalid input
      headers:
        x-correlator:
          $ref: '#/components/parameters/x-correlator'
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorInfo'
              - type: object
                properties:
                  status:
                    enum:
                      - 400
                  code:
                    enum:
                      - MISSING_REQUIRED_PARAM
                      - INVALID_PARAMETER_VALUE
                      - INVALID_ARGUMENT
                      - "{{SPECIFIC_CODE}}"
          examples:
            GENERIC_400_MISSING_REQUIRED_PARAM:
              description: Missing required parameter
              value:
                status: 400
                code: MISSING_REQUIRED_PARAM
                message: "Required parameter 'configurationPrompt' is missing"
            GENERIC_400_INVALID_PARAMETER_VALUE:
              description: Invalid parameter value
              value:
                status: 400
                code: INVALID_PARAMETER_VALUE
                message: "Temperature must be between 0.0 and 1.0"
            GENERIC_400_INVALID_ARGUMENT:
              description: Invalid argument
              value:
                status: 400
                code: INVALID_ARGUMENT
                message: "Client specified an invalid argument"
            GENERIC_400_{{SPECIFIC_CODE}}:
              description: Specific bad request situation
              value:
                status: 400
                code: { { SPECIFIC_CODE } }
                message: { { SPECIFIC_CODE_MESSAGE } }

    Generic401:
      description: Authentication required
      headers:
        x-correlator:
          $ref: '#/components/parameters/x-correlator'
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorInfo'
              - type: object
                properties:
                  status:
                    enum:
                      - 401
                  code:
                    enum:
                      - UNAUTHENTICATED
                      - "{{SPECIFIC_CODE}}"
          examples:
            GENERIC_401_UNAUTHENTICATED:
              description: Authentication credentials missing or invalid
              value:
                status: 401
                code: UNAUTHENTICATED
                message: Authentication credentials missing or invalid
            GENERIC_401_{{SPECIFIC_CODE}}:
              description: Specific authentication failure
              value:
                status: 401
                code: { { SPECIFIC_CODE } }
                message: { { SPECIFIC_CODE_MESSAGE } }

    Generic403:
      description: Insufficient permissions
      headers:
        x-correlator:
          $ref: '#/components/parameters/x-correlator'
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorInfo'
              - type: object
                properties:
                  status:
                    enum:
                      - 403
                  code:
                    enum:
                      - PERMISSION_DENIED
                      - INVALID_TOKEN_CONTEXT
                      - "{{SPECIFIC_CODE}}"
          examples:
            GENERIC_403_PERMISSION_DENIED:
              description: User lacks required permissions
              value:
                status: 403
                code: PERMISSION_DENIED
                message: User lacks required permissions for this operation
            GENERIC_403_INVALID_TOKEN_CONTEXT:
              description: Token context inconsistency
              value:
                status: 403
                code: INVALID_TOKEN_CONTEXT
                message: "Assistant ID is not consistent with access token"
            GENERIC_403_{{SPECIFIC_CODE}}:
              description: Specific permission issue
              value:
                status: 403
                code: { { SPECIFIC_CODE } }
                message: { { SPECIFIC_CODE_MESSAGE } }

    Generic404:
      description: Resource not found
      headers:
        x-correlator:
          $ref: '#/components/parameters/x-correlator'
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorInfo'
              - type: object
                properties:
                  status:
                    enum:
                      - 404
                  code:
                    enum:
                      - NOT_FOUND
                      - ASSISTANT_NOT_FOUND
                      - IDENTIFIER_NOT_FOUND
                      - "{{SPECIFIC_CODE}}"
          examples:
            GENERIC_404_NOT_FOUND:
              description: Resource is not found
              value:
                status: 404
                code: NOT_FOUND
                message: The specified resource is not found.
            GENERIC_404_ASSISTANT_NOT_FOUND:
              description: Assistant not found
              value:
                status: 404
                code: ASSISTANT_NOT_FOUND
                message: "Specified assistant ID does not exist"
            GENERIC_404_IDENTIFIER_NOT_FOUND:
              description: Identifier not found
              value:
                status: 404
                code: IDENTIFIER_NOT_FOUND
                message: Assistant identifier not found.
            GENERIC_404_{{SPECIFIC_CODE}}:
              description: Specific resource not found situation
              value:
                status: 404
                code: { { SPECIFIC_CODE } }
                message: { { SPECIFIC_CODE_MESSAGE } }

    Generic500:
      description: Internal server error
      headers:
        x-correlator:
          $ref: '#/components/parameters/x-correlator'
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ErrorInfo'
              - type: object
                properties:
                  status:
                    enum:
                      - 500
                  code:
                    enum:
                      - INTERNAL_SERVER_ERROR
                      - INTERNAL
                      - "{{SPECIFIC_CODE}}"
          examples:
            GENERIC_500_INTERNAL_SERVER_ERROR:
              description: Unexpected server error
              value:
                status: 500
                code: INTERNAL_SERVER_ERROR
                message: "Unexpected server error occurred"
            GENERIC_500_INTERNAL:
              description: Internal server error
              value:
                status: 500
                code: INTERNAL
                message: Unknown server error
            GENERIC_500_{{SPECIFIC_CODE}}:
              description: Specific internal server error
              value:
                status: 500
                code: { { SPECIFIC_CODE } }
                message: { { SPECIFIC_CODE_MESSAGE } }
